{"version":3,"sources":["components/SearchBar.js","components/UserCard.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","searchUser","onSearch","e","setState","target","value","onhandleFormSubmit","preventDefault","props","onsubmit","className","onSubmit","this","type","onChange","placeholder","Component","UserCard","style","marginTop","id","src","userdata","image","name","class","username","location","followers","Header","backgroundColor","color","padding","fontSize","textAlign","App","onApisearchSubmit","user","fetch","then","response","json","data","console","log","login","avatar_url","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAkCeA,E,2MA/BbC,MAAQ,CACNC,WAAY,I,EAGdC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAAEH,WAAYE,EAAEE,OAAOC,S,EAGvCC,mBAAqB,SAAAJ,GACnBA,EAAEK,iBACF,EAAKC,MAAMC,SAAS,EAAKV,MAAMC,a,wEAI/B,OACE,yBAAKU,UAAU,UACb,0BAAMC,SAAUC,KAAKN,oBACnB,yBAAKI,UAAU,sBACb,2BACEG,KAAK,OACLC,SAAUF,KAAKX,SACfc,YAAY,aAEd,uBAAGL,UAAU,uB,GAxBDM,aC6BTC,EA7BE,SAAAT,GACf,OACE,yBAAKE,UAAU,OAAOQ,MAAO,CAAEC,UAAW,SACxC,yBAAKT,UAAU,UAAUU,GAAG,QAC1B,yBAAKV,UAAU,SACb,yBAAKW,IAAKb,EAAMc,SAASC,SAE3B,yBAAKb,UAAU,WACb,uBAAGA,UAAU,UAAUF,EAAMc,SAASE,MACtC,yBAAKd,UAAU,QACb,uBAAGe,MAAM,cACT,0BAAMf,UAAU,YAAYF,EAAMc,SAASI,WAE7C,yBAAKhB,UAAU,eACb,uBAAGA,UAAU,cACZF,EAAMc,SAASK,WAGpB,yBAAKjB,UAAU,iBACb,2BACE,uBAAGA,UAAU,eACZF,EAAMc,SAASM,eCHbC,EAlBA,WACb,OACE,yBACEnB,UAAU,SACVQ,MAAO,CACLY,gBAAiB,UACjBC,MAAO,QACPC,QAAS,OACTC,SAAU,OACVC,UAAW,WAGb,uBAAGxB,UAAU,eAAb,KAVF,sBAUsD,IACpD,uBAAGA,UAAU,eAAb,OC+BSyB,G,kBAvCb,WAAY3B,GAAQ,IAAD,8BACjB,4CAAMA,KAMR4B,kBAAoB,SAAAC,GAClBC,MAAM,gCAAD,OAAiCD,IACnCE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACZ,EAAKvC,SAAS,CACZkC,KAAM,CACJb,KAAMkB,EAAKlB,KACXG,SAAUe,EAAKf,SACfC,UAAWc,EAAKd,UAChBF,SAAUgB,EAAKG,MACftB,MAAOmB,EAAKI,kBAhBpB,EAAK/C,MAAQ,CACXsC,KAAM,IAHS,E,iFAyBjBzB,KAAKwB,sB,+BAGL,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW3B,SAAUG,KAAKwB,oBAE1B,kBAAC,EAAD,CAAUd,SAAUV,KAAKb,MAAMsC,Y,GAlCrBrB,cCME+B,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,iB","file":"static/js/main.94c19702.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  state = {\r\n    searchUser: \"\"\r\n  };\r\n\r\n  onSearch = e => {\r\n    this.setState({ searchUser: e.target.value });\r\n  };\r\n\r\n  onhandleFormSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onsubmit(this.state.searchUser); //that means when onsubmit prop which is coming from onApiSearchSubmit method..when user submit the form it will updt the state\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <form onSubmit={this.onhandleFormSubmit}>\r\n          <div className=\"ui huge icon input\">\r\n            <input\r\n              type=\"text\"\r\n              onChange={this.onSearch}\r\n              placeholder=\"Username\"\r\n            ></input>\r\n            <i className=\"search icon\"></i>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nconst UserCard = props => {\r\n  return (\r\n    <div className=\"card\" style={{ marginTop: \"70px\" }}>\r\n      <div className=\"ui card\" id=\"card\">\r\n        <div className=\"image\">\r\n          <img src={props.userdata.image} />\r\n        </div>\r\n        <div className=\"content\">\r\n          <a className=\"header\">{props.userdata.name}</a>\r\n          <div className=\"meta\">\r\n            <i class=\"user icon\"></i>\r\n            <span className=\"location\">{props.userdata.username}</span>\r\n          </div>\r\n          <div className=\"description\">\r\n            <i className=\"home icon\"></i>\r\n            {props.userdata.location}\r\n          </div>\r\n        </div>\r\n        <div className=\"extra content\">\r\n          <a>\r\n            <i className=\"users icon\"></i>\r\n            {props.userdata.followers}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserCard;\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav\r\n      className=\"header\"\r\n      style={{\r\n        backgroundColor: \"#101010\",\r\n        color: \"white\",\r\n        padding: \"15px\",\r\n        fontSize: \"20px\",\r\n        textAlign: \"center\"\r\n      }}\r\n    >\r\n      <i className=\"github icon\"> </i> Github Search User{\" \"}\r\n      <i className=\"github icon\"> </i>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\nimport SearchBar from \"./components/SearchBar\";\nimport UserCard from \"./components/UserCard\";\nimport Header from \"./components/Header\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: {} //object..that will define in setstate\n    };\n  }\n\n  onApisearchSubmit = user => {\n    fetch(`https://api.github.com/users/${user}`)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        this.setState({\n          user: {\n            name: data.name,\n            location: data.location,\n            followers: data.followers,\n            username: data.login,\n            image: data.avatar_url\n          }\n        });\n      });\n  };\n\n  componentDidMount() {\n    this.onApisearchSubmit();\n  }\n  render() {\n    return (\n      <div>\n        <Header />\n        <SearchBar onsubmit={this.onApisearchSubmit} />\n        {/* onsubmit is a prop that is passing to SearchBar component */}\n        <UserCard userdata={this.state.user} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}